// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.4.0.0
//      SpecFlow Generator Version:2.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace JSONPlaceholder.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("End To End Tests - Posts and comments")]
    public partial class EndToEndTests_PostsAndCommentsFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "End To End Tests - Posts and comments.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "End To End Tests - Posts and comments", "         As a JSONPlaceholder user\r\n\t\t I want to be able to work on the posts and" +
                    " comments\r\n\t\t So that I can see,edit and delete my posts and comments", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("E2E Posts and comments")]
        public virtual void E2EPostsAndComments()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("E2E Posts and comments", null, ((string[])(null)));
#line 6
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 8
          testRunner.Given("that I can access JSONPlaceholder \'posts\' endpoint", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 10
    testRunner.And("I get status code \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "endPoint",
                        "referenceData"});
            table1.AddRow(new string[] {
                        "posts",
                        "userId:1,title:Test_1,body:Post Testing 1"});
            table1.AddRow(new string[] {
                        "posts",
                        "userId:1,title:Test_2,body:Post Testing 2"});
            table1.AddRow(new string[] {
                        "posts",
                        "userId:1,title:Test_3,body:Post Testing 3"});
#line 12
          testRunner.When("I send a POST request to the below end point :", ((string)(null)), table1, "When ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "title"});
            table2.AddRow(new string[] {
                        "Test_1"});
            table2.AddRow(new string[] {
                        "Test_2"});
            table2.AddRow(new string[] {
                        "Test_3"});
#line 20
          testRunner.Then("new \'posts\' are created", ((string)(null)), table2, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "endPoint",
                        "referenceData"});
            table3.AddRow(new string[] {
                        "posts",
                        "Test_1,userId:1,title:updated 1,body:Post Updated 1"});
            table3.AddRow(new string[] {
                        "posts",
                        "Test_2,userId:1,title:updated 2,body:Post Updated 2"});
            table3.AddRow(new string[] {
                        "posts",
                        "Test_3,userId:1,title:updated 3,body:Post Updated 3"});
#line 26
          testRunner.When("I send a PUT request to the below end point :", ((string)(null)), table3, "When ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "post",
                        "title",
                        "body"});
            table4.AddRow(new string[] {
                        "Test_1",
                        "updated 1",
                        "Post Updated 1"});
            table4.AddRow(new string[] {
                        "Test_2",
                        "updated 2",
                        "Post Updated 2"});
            table4.AddRow(new string[] {
                        "Test_3",
                        "updated 3",
                        "Post Updated 3"});
#line 32
          testRunner.Then("\'posts\' are updated", ((string)(null)), table4, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "endPoint",
                        "referenceData"});
            table5.AddRow(new string[] {
                        "comments",
                        "postid:Test_1,name:comment_1,email:comment@gmail.com_1,body:comments Testing"});
            table5.AddRow(new string[] {
                        "comments",
                        "postid:Test_2,name:comment_2,email:comment@gmail.com_2,body:comments Testing"});
            table5.AddRow(new string[] {
                        "comments",
                        "postid:Test_3,name:comment_3,email:comment@gmail.com_3,body:comments Testing"});
#line 38
    testRunner.When("I send a POST request to the below end point :", ((string)(null)), table5, "When ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "name"});
            table6.AddRow(new string[] {
                        "comment_1"});
            table6.AddRow(new string[] {
                        "comment_2"});
            table6.AddRow(new string[] {
                        "comment_3"});
#line 44
    testRunner.Then("new \'comments\' are created", ((string)(null)), table6, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "endPoint",
                        "referenceData"});
            table7.AddRow(new string[] {
                        "comments",
                        "comment_1,body:comment updated 1"});
            table7.AddRow(new string[] {
                        "comments",
                        "comment_2,body:comment updated 2"});
            table7.AddRow(new string[] {
                        "comments",
                        "comment_3,body:comment updated 3"});
#line 50
          testRunner.When("I send a PUT request to the below end point :", ((string)(null)), table7, "When ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "comments",
                        "body"});
            table8.AddRow(new string[] {
                        "comment_1",
                        "comment updated 1"});
            table8.AddRow(new string[] {
                        "comment_2",
                        "comment updated 2"});
            table8.AddRow(new string[] {
                        "comment_3",
                        "comment updated 3"});
#line 56
    testRunner.Then("\'comments\' are updated", ((string)(null)), table8, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion

